digraph "Metropolis"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node2 [label="{Metropolis\n|- Alpha_\l- K_\l- Lambda_\l|+ Metropolis()\l+ Alpha()\l+ attempt_move()\l+ CalculateA1()\l+ CalculateA2()\l+ Checkpoint()\l+ K()\l+ Lambda()\l+ operator()()\l+ Passes()\l+ TotalMoves()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{MoveAlgorithm\n|# checkpoint_\l# N1_TL_\l# N3_22_\l# N3_31_13_\l# passes_\l|+ CurrentTotalSimplices()\l+ FourFourMoves()\l+ print_run()\l+ SixTwoMoves()\l+ SuccessfulFourFourMoves()\l+ SuccessfulSixTwoMoves()\l+ SuccessfulThreeTwoMoves()\l+ SuccessfulTwoSixMoves()\l+ SuccessfulTwoThreeMoves()\l+ ThreeTwoMoves()\l+ TwoSixMoves()\l+ TwoThreeMoves()\l# MoveAlgorithm()\l# make_move()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_move_algorithm.html",tooltip="Base class for move algorithms. "];
  Node4 -> Node3 [color="grey25",fontsize="10",style="solid",label=" #attempted_moves_\n#successful_moves_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{std::array\< int, 5 \>\n|+ elements\l|}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node5 -> Node3 [color="grey25",fontsize="10",style="solid",label=" #universe_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{SimplicialManifold\n||+ SimplicialManifold()\l+ SimplicialManifold()\l+ SimplicialManifold()\l+ SimplicialManifold()\l+ SimplicialManifold()\l+ ~SimplicialManifold()\l+ operator=()\l+ operator=()\l+ reconcile()\l+ update()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_simplicial_manifold.html"];
  Node6 -> Node5 [color="grey25",fontsize="10",style="solid",label=" +triangulation" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{std::unique_ptr\< Delaunay3 \>\n|+ ptr\l|+ operator-\>()\l}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node7 -> Node5 [color="grey25",fontsize="10",style="solid",label=" +geometry" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{std::unique_ptr\< Geometry\lInfo \>\n||+ operator-\>()\l}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node8 -> Node7 [color="grey25",fontsize="10",style="solid",label=" +ptr" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{GeometryInfo\n|- spacelike_facets\l- timevalues\l|+ GeometryInfo()\l+ GeometryInfo()\l+ GeometryInfo()\l+ GeometryInfo()\l+ ~GeometryInfo()\l+ getSpacelike_facets()\l+ getTimevalues()\l+ max_timevalue()\l+ min_timevalue()\l+ N0()\land 12 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_geometry_info.html"];
  Node9 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -vertices" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{std::vector\< Vertex\l_handle \>\n|+ elements\l|}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node10 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -spacelike_edges\n-timelike_edges" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{std::vector\< Edge_handle \>\n|+ elements\l|}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node11 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -one_three\n-two_two\n-three_one" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{std::vector\< Cell_handle \>\n|+ elements\l|}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
}
